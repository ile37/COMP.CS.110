/* Hitori
 *
 * Kuvaus:
 *   Ohjelma toteuttaa Hitori-pelin. Pelissä on peliruudukko kooltaan
 * 5 x 5. Kukin ruutu sisältää jonkin numeroista 1-5. Vaaka- ja
 * pystyriveillä voi aluksi olla useita samoja numeroita, mutta
 * tarkoituksena on poistaa numeroita niin, että kullakin vaaka- ja
 * pystyrivillä on kutakin numeroa vain yksi tai ei yhtään. Kuitenkaan
 * vierekkäisten ruutujen numeroita ei saa poistaa, eikä mikään jäljelle
 * jäävä numero (ruutu) saa jäädä irralleen muista, eli sen ympäriltä
 * (yläpuolelta, alapuolelta, vasemmalta, oikealta) ei saa poistaa
 * kaikkia numeroita.
 *   Aluksi käyttäjältä kysytään, täytetäänkö peliruudukko satunnaisesti
 * arvottavilla luvuilla 1-5 vai käyttäjän valitsemilla 25 luvulla.
 * Ensimmäisessä vaihtoehdossa käyttäjältä kysytään satunnaisluku-
 * generaattorin siemenlukua ja jälkimmäisessä häntä pyydetään syöttämään
 * 25 lukua.
 *   Joka kierroksella käyttäjältä kysytään poistettavan numeron
 * koordinaatteja eli kahta lukua. Peli päättyy pelaajan voittoon,
 * jos peliruudukon kaikilla vaaka- ja pystyriveillä esiintyy kukin
 * numero 1-5 korkeintaan kerran. Peli päättyy pelaajan häviöön,
 * jos hän poistaa jo poistetun numeron viereisen numeron tai jos
 * jokin numero jää irralleen muista.
 *   Ohjelma tarkistaa annetut koordinaatit. Koordinaattien pitää olla
 * peliruudukon sisällä, ja niiden osoittaman ruudun pitää sisältää
 * numero, eli jo poistettua numeroa ei voi poistaa toiseen kertaan.
 *   Pelin päättyessä kerrotaan, voittiko vai hävisikö pelaaja.
 *
 * Ohjelman kirjoittaja
 * Nimi: Ilari Hietala
 * Opiskelijanumero: H291752
 * Käyttäjätunnus: hgilhi ( Git-repositorion hakemistonimi. )
 * E-Mail: ilari.hietala@tuni.fi
 *
 * Huomioita ohjelmasta ja sen toteutuksesta:
 *
 * */
#include <iostream>
#include <vector>
#include <string>
#include<algorithm>
#include <random>

using namespace std;

const unsigned int BOARD_SIDE = 5;
const unsigned char EMPTY = ' ';

// Muuttaa annetun numeerisen merkkijonon vastaavaksi kokonaisluvuksi
// (kutsumalla stoi-funktiota).
// Jos annettu merkkijono ei ole numeerinen, palauttaa nollan.
//
// Converts the given numeric string to the corresponding integer
// (by calling stoi).
// If the given string is not numeric, returns zero.
unsigned int stoi_with_check(const string& str)
{
    bool is_numeric = true;
    for(unsigned int i = 0; i < str.length(); ++i)
    {
        if(not isdigit(str.at(i)))
        {
            is_numeric = false;
            break;
        }
    }
    if(is_numeric)
    {
        return stoi(str);
    }
    else
    {
        return 0;
    }
}

// Tulostaa pelilaudan rivi- ja sarakenumeroineen.
//
// Prints the game board with row and column numbers.
void print(const vector< vector<int>>& gameboard)
{
    cout << "=================" << endl;
    cout << "|   | 1 2 3 4 5 |" << endl;
    cout << "-----------------" << endl;
    for(unsigned int i = 0; i < BOARD_SIDE; ++i)
    {
        cout << "| " << i + 1 << " | ";
        for(unsigned int j = 0; j < BOARD_SIDE; ++j)
        {
            if(gameboard.at(i).at(j) == 0)
            {
                cout << EMPTY << " ";
            }
            else
            {
                cout << gameboard.at(i).at(j) << " ";
            }
        }
        cout << "|" << endl;
    }
    cout << "=================" << endl;
}


string random_board(int seed) {

    string board_input;
    int lower_limit = 1;
    int upper_limit = BOARD_SIDE;

    default_random_engine gen(seed);
    uniform_int_distribution<int> distr(lower_limit, upper_limit);

    for (int i = 1; i <= 25; i++) {
        board_input += to_string(distr(gen));
    }

    return board_input;
}


vector< vector<int>> create_board(string board_line) {

    vector< vector<int>> board;
    vector< int> row;

    int column_counter = 0;
    string row_str;

    for (unsigned int i = 0; i < 25; i++) {

        row_str.push_back(board_line.at(i));

        column_counter += 1;

        if (column_counter == BOARD_SIDE) {
            if (stoi_with_check(row_str) != 0){
                for (auto i : row_str) {
                    row.push_back(i - 48);
                }
                board.push_back(row);
                row.clear();
                row_str.clear();
                column_counter = 0;

            }
        }
    }

    return board;

}


int main()
{
    vector< vector<int>> board;
    string board_line;

    bool loop = true;
    // Selects witch type of board teh game will use random/input
    // A
    while(loop) {
        cout << "Select start (R for random, I for input): ";
        string input;
        cin >> input;
        for (auto i : input) {
            if (i == 'r' or i == 'R') {
                cout << "Enter seed value: ";
                int seed;
                cin >> seed;
                board_line = random_board(seed);
                loop = false;

            } else if (i == 'I' or i == 'i') {

                cout << "Input: ";
                cin.ignore();
                getline(cin, board_line);
                board_line.erase(remove(board_line.begin(), board_line.end(), ' '), board_line.end());
                loop = false;
            }
        }
    }



    board = create_board(board_line);
    print(board);





    return 0;
}









